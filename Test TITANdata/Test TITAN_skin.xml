<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

    


  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/hotspot_animated_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="19"
         framewidth="64"
         frameheight="64"
         stopspotsequence="false"
         crop="0|0|64|64"
         edge="center"
         rotate="270"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle"
         onover="onoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"


         />
  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconDefaultPointSpotStyle">


pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();


resumeautorotation(forcehotspot);

  </action>



  



  <style name="prevnexttheme2btn_alpha_style" 
    alpha="0.0" onover="set(alpha, 1);" onout="set(alpha, 0.0);"
    devices="desktop"
  />
  <style name="prevnexttheme2btn_alpha_style" 
    alpha="1.0"
    devices="tablet.or.mobile"
  />
  <layer name="prevnexttheme2btn_prev_pano" keep="true" align="left"
         height="102%"
         width="5%"
         type="container"
         bgcapture="true"
         bgalpha="0.20000000000000001"
         bgcolor="0xeeeeee"
         zorder="1"
         onclick="loadPreviousScene();
"
         style="prevnexttheme2btn_alpha_style"
         visible="false">
    <layer name="prevnexttheme2prevPanoramaArrow" keep="true" align="center"
         url="%FIRSTXML%/graphics/prevnextstrips/btn_scroll_left.png"
         alpha="1"
         zorder="0"
         tooltip="prevnexttheme2prevSceneTip"
         onhover="showTooltip('plugin',prevnexttheme2TooltipStyle,left);"
         onout="hideTooltip();"
         onclick="loadPreviousScene();
"
    />
  </layer>

  <layer name="prevnexttheme2btn_next_pano" keep="true" align="right"
         height="102%"
         width="5%"
         type="container"
         bgcapture="true"
         bgalpha="0.20000000000000001"
         bgcolor="0xeeeeee"
         zorder="1"
         onclick="loadNextScene();
"
         style="prevnexttheme2btn_alpha_style"
         visible="false">
    <layer name="prevnexttheme2nextPanoramaArrow" keep="true" align="center"
         url="%FIRSTXML%/graphics/prevnextstrips/btn_scroll_right.png"
         alpha="1"
         zorder="0"
         tooltip="prevnexttheme2nextSceneTip"
         onhover="showTooltip('plugin',prevnexttheme2TooltipStyle,right);"
         onout="hideTooltip();"
         onclick="loadNextScene();
"
    />
  </layer>

  <events name="prevnexttheme2hideshowcontrolsevent" 
    onTourStart="prevnexttheme2showPrevNextControls();"
    keep="true"/>
  <action name="prevnexttheme2hidePrevNextControls">
    set(layer[prevnexttheme2btn_prev_pano].visible, false);
    set(layer[prevnexttheme2btn_next_pano].visible, false);
  </action>
  <action name="prevnexttheme2showPrevNextControls">
    set(layer[prevnexttheme2btn_prev_pano].visible, true);
    set(layer[prevnexttheme2btn_next_pano].visible, true);
  </action>

<layer name="prevnexttheme2TooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="false"
	bgborder="0"
	txtshadow="1.0 1.0 4.0 0x000000 1"
	css="color:#e6e6e6;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
/>

  <events name="doubleclick_events" keep="true" ondoubleclick="doubleclick_ondoubleclick"/>
  <action name="doubleclick_ondoubleclick">switchFullscreen();


  </action>


<plugin name="gyroscope"
        url="%FIRSTXML%/graphics/gyro2.js"
        keep="true"
        devices="no-desktop.and.html5"

        onunavailable="checkGyroUnavailable();"
        sensor_mode="1"
        friction="auto"
        autocalibration="true"
        touch_mode="full"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
    if(scene[get(xml.scene)].full360,
      set(sceneisfull360, false);
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
      if (sceneisfull360,
        set(plugin[gyroscope].camroll, true);
      ,
        set(plugin[gyroscope].camroll, false);
      );
    ,
      set(plugin[gyroscope].camroll, false);
    );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      if(%1,
        set(plugin[gyroscope].activated,true);
      ,
        set(plugin[gyroscope].activated,false);
      );
      if (%1 != plugin[gyroscope].enabled,
        if(plugin[gyroscope].activated,
          switch(plugin[gyroscope].enabled);
        ,
          set(plugin[gyroscope].enabled, false);
        );
        if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
      );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      
      set(sceneisfull360, false);
      if (scene[get(xml.scene)].full360,
        sub(viewhfov, panoview.hmax, panoview.hmin);
        if (viewhfov == 360,
          sub(viewvfov, panoview.vmax, panoview.vmin);
          if (viewvfov == 180,
            set(sceneisfull360, true);
          );
        );
      );
      set(delaythegyrocheck, false);
      if (sceneisfull360 AND tour_firstlittleplanet, set(delaythegyrocheck, true));

      ifnot(delaythegyrocheck,
        switch(plugin[gyroscope].enabled);
        set(plugin[gyroscope].activated,true);
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        delayedcall(1, checkGyroAvailability(););
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  ,
    checkGyroUnavailable();
  );
</action>

<action name="checkGyroUnavailable">
  set(plugin[gyroscope].activated, false);
  set(plugin[gyroscope].enabled, false);
  set(tour_gyroscopedevices, false);
  events.dispatch(ongyroscopeunavailable);
</action>







<layer name="thumbnailsBar_thumbnailsBar_theme02" 
	keep="true" 
	type="image" 
	visible="false"
	align="bottomleft" 
	
		width="20%" 
		height="0" 
		
	
	x="10"
	y="20"
	
	url="%FIRSTXML%/graphics/classicthumbnailsbar/frame_bg.png" 
	scale9grid="10|10|80|80"
	
	zorder="4"
/>


<layer name="thumbnailBorderSource_thumbnailsBar_theme02"
	keep="true"
	visible="false"
	onloaded="loadedImages_thumbnailsBar_theme02(border);"
	url="%FIRSTXML%/graphics/classicthumbnailsbar/thumbnails_states.png" 
	offsetX="10"
	offsetY="10"
	quarterHeight="0"
/>


	
	<krpano arrow1Loaded_thumbnailsBar_theme02="false" arrow2Loaded_thumbnailsBar_theme02="false" borderLoaded_thumbnailsBar_theme02="false" thumbnailsLoadedCounter_thumbnailsBar_theme02="0" thumbsCount_thumbnailsBar_theme02="0" thumbsCounter_thumbnailsBar_theme02="0" firstInit_thumbnailsBar_theme02="false" />
	
	
	<events name="thumbnailsScrollEvents_thumbnailsBar_theme02" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize_thumbnailsBar_theme02,set(isLoaded_thumbnailsBar_theme02, true);if(isStarted_thumbnailsBar_theme02,onLoadCompleteHandler_thumbnailsBar_theme02();););"
		onTourStart="set(isStarted_thumbnailsBar_theme02, true);if(isLoaded_thumbnailsBar_theme02,onLoadCompleteHandler_thumbnailsBar_theme02(););"
		onnewpano="if(startResize_thumbnailsBar_theme02,if(firstInit_thumbnailsBar_theme02,onLoadCompleteHandler_thumbnailsBar_theme02();););"
		onresize="onResizeHandler_thumbnailsBar_theme02();"
		hidetourthumbnails="hideWithThumbnailsButton_thumbnailsBar_theme02();" 
		showtourthumbnails="showWithThumbnailsButton_thumbnailsBar_theme02();" 
		hidetourcontrols="hideWithControlsBar_thumbnailsBar_theme02();" 
		showtourcontrols="showWithControlsBar_thumbnailsBar_theme02();" 
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb_thumbnailsBar_theme02(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb_thumbnailsBar_theme02(););"	
	/>
	
	
	<layer name="scrollAreaContainer_thumbnailsBar_theme02" 
         keep="true"
         type="container" 
         align="topleft" x="5" y="5"
         marginX="5"
         marginY="5"
         width="0" height="0"
         targetWidth="0"
         targetHeight="0"
         scrollSpeedInit="10"
         scrollSpeed="10"
         scrollSpeedMax="70"
         scrollSpeedAcceleration="20"
         parent="thumbnailsBar_thumbnailsBar_theme02"
         thumbWidth="0"
         thumbHeight="0"
         itemWidth="100"
         itemHeight="50"
         offsetX="0" offsetY="0"
         thumbSpacer="0"
         currentThumbsCount="0"
         adjustToContent="true"
         zorder="1"
         visible="false"
         ready="false">
	
		
    <layer name="thumbsScrollArea_thumbnailsBar_theme02"
           url.flash="%FIRSTXML%/graphics/scrollarea.swf"
           url.html5="%FIRSTXML%/graphics/scrollarea.js"
           align="bottomleft" x="0" y="0"
           onhover_autoscrolling="false"
           direction="h"/>
	
	</layer>
	
	
	<layer name="scrollPrevArrow_thumbnailsBar_theme02" 
         keep="true"
         type="image"
         visible="false"
         parent="thumbnailsBar_thumbnailsBar_theme02"
         targetHeight="0"
         targetWidth="0"
         zorder="2"
         onloaded="loadedImages_thumbnailsBar_theme02(arrow1);"
         url="%FIRSTXML%/graphics/classicthumbnailsbar/btn_scroll_left.png"
         align="left"
	/>
	
	
	<layer name="scrollNextArrow_thumbnailsBar_theme02" 
         keep="true"
         type="image"
         visible="false"
         parent="thumbnailsBar_thumbnailsBar_theme02"
         targetHeight="0"
         targetWidth="0"
         zorder="2"
         onloaded="loadedImages_thumbnailsBar_theme02(arrow2);"
         url="%FIRSTXML%/graphics/classicthumbnailsbar/btn_scroll_right.png"
         align="right"
	/>
	
	<action name="loadedImages_thumbnailsBar_theme02">
		if(%1 == "arrow1",
			set(arrow1Loaded_thumbnailsBar_theme02, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded_thumbnailsBar_theme02, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				set(borderLoaded_thumbnailsBar_theme02, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter_thumbnailsBar_theme02);
		);
	</action>
	
	<action name="onLoadCompleteHandler_thumbnailsBar_theme02">
		
		set(thumbsCount_thumbnailsBar_theme02, 0);
		
		
		set(thumbsCount_thumbnailsBar_theme02, get(scene.count));
		
		
		
		
		
		
		
		loadThumbs_thumbnailsBar_theme02();
		
		if(firstInit_thumbnailsBar_theme02,
			onLoadCompleteHandlerPartThree_thumbnailsBar_theme02();
		,
			onLoadCompleteHandlerPartTwo_thumbnailsBar_theme02();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo_thumbnailsBar_theme02">
		set(imgCounter_thumbnailsBar_theme02, 3);
		
		if(arrow1Loaded_thumbnailsBar_theme02,
			dec(imgCounter_thumbnailsBar_theme02);
		);
		if(arrow2Loaded_thumbnailsBar_theme02,
			dec(imgCounter_thumbnailsBar_theme02);
		);
		if(thumbsCount_thumbnailsBar_theme02 == thumbnailsLoadedCounter_thumbnailsBar_theme02,
			dec(imgCounter_thumbnailsBar_theme02);
		);
		
		if(imgCounter_thumbnailsBar_theme02 LE 0,
			stopdelayedcall(delayedCallOnLoadComplete_thumbnailsBar_theme02);
			onLoadCompleteHandlerPartThree_thumbnailsBar_theme02();
		,
			delayedcall(delayedCallOnLoadComplete_thumbnailsBar_theme02, 0.2, onLoadCompleteHandlerPartTwo_thumbnailsBar_theme02());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree_thumbnailsBar_theme02">
		resetMouseBehavior_thumbnailsBar_theme02();
		highlightCurrentThumb_thumbnailsBar_theme02();
		
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
			mul(adjustWidth_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX), 2);
			add(adjustWidth_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].width));
			mul(adjustHeight_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginY), 2);
			add(adjustHeight_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].height));
			
			
			if(adjustWidth_thumbnailsBar_theme02 GT stagewidth,
				set(adjustWidth_thumbnailsBar_theme02, get(stagewidth));
				set(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent, false);
			,
				if(adjustHeight_thumbnailsBar_theme02 GT stageheight,
					set(adjustHeight_thumbnailsBar_theme02, get(stageheight));
					set(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent, false);
				);
			);
			
			setSize_thumbnailsBar_theme02(get(adjustWidth_thumbnailsBar_theme02), get(adjustHeight_thumbnailsBar_theme02));
		);
		
		setupArrows_thumbnailsBar_theme02(true);
		
		
		if (thumbsCounter_thumbnailsBar_theme02 LE 0,
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
		);
		
		
		set(startResize_thumbnailsBar_theme02, true);
		set(firstInit_thumbnailsBar_theme02, true);
	</action>
	
	
	<action name="onResizeHandler_thumbnailsBar_theme02">
		
		delayedcall(0.1, onResizeCallback_thumbnailsBar_theme02(false); );
	</action>
	
	
	<action name="onResizeCallback_thumbnailsBar_theme02">
		if(startResize_thumbnailsBar_theme02,
			setSize_thumbnailsBar_theme02(get(layer[scrollAreaContainer_thumbnailsBar_theme02].targetWidth), get(layer[scrollAreaContainer_thumbnailsBar_theme02].targetHeight));
			setupArrows_thumbnailsBar_theme02(%1);
			
			
			if (thumbsCounter_thumbnailsBar_theme02 LE 0,
				set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
			);
		);
	</action>
	
	
		<action name="showWithThumbnailsButton_thumbnailsBar_theme02">
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, true);
			onResizeCallback_thumbnailsBar_theme02(true);
		</action>
		
		<action name="hideWithThumbnailsButton_thumbnailsBar_theme02">
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
		</action>
	
	
		<action name="showWithControlsBar_thumbnailsBar_theme02">
			
				if (tour_displaythumbnails,
					set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, true);
					onResizeCallback_thumbnailsBar_theme02(true);
				,
					set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
				);
		</action>
		
		<action name="hideWithControlsBar_thumbnailsBar_theme02">
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
		</action>
	
	
	<action name="thumbnailBorderDrawInit_thumbnailsBar_theme02">
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth));
		
		
		mul(totalOffsetX_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth), 2);
		mul(totalOffsetY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth), 2);
		
		
		if(startResize_thumbnailsBar_theme02,
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
		);
		
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbWidth, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbHeight, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
		
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
	</action>
		
	
	<action name="thumbnailBorderImageInit_thumbnailsBar_theme02">
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetX));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetY));
		
		
		mul(totalOffsetX_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetX), 2);
		mul(totalOffsetY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetY), 2);
		
		
		if(startResize_thumbnailsBar_theme02,
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
		);
		
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbWidth, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbHeight, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
		
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
		
		
		div(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].height), 4);
		
		
		set(cropX_thumbnailsBar_theme02, 0);
		set(cropY_thumbnailsBar_theme02, 0);
		set(cropW_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].width));
		set(cropH_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropDefault, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));

		
		add(cropY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropHover, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));
		
		
		add(cropY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));
		
		
		add(cropY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropVisited, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));
		
		
		set(scaleX_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetX));
		set(scaleY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetY));
		sub(scaleW_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].width), get(totalOffsetX_thumbnailsBar_theme02));
		sub(scaleH_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight), get(totalOffsetY_thumbnailsBar_theme02));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].scale9grid, get(scaleX_thumbnailsBar_theme02), '|', get(scaleY_thumbnailsBar_theme02), '|', get(scaleW_thumbnailsBar_theme02), '|', get(scaleH_thumbnailsBar_theme02));
	</action>
	
	
	<action name="loadThumbs_thumbnailsBar_theme02">
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(imgCounter_thumbnailsBar_theme02, 1);
		,
			set(imgCounter_thumbnailsBar_theme02, 0);
		);
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			if(borderLoaded_thumbnailsBar_theme02,
				dec(imgCounter_thumbnailsBar_theme02);
			);
		);
		
		if(imgCounter_thumbnailsBar_theme02 LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder_thumbnailsBar_theme02);
			loadThumbsPartTwo_thumbnailsBar_theme02();
		,
			delayedcall(delayedCallOnLoadCompleteBorder_thumbnailsBar_theme02, 0.2, loadThumbs_thumbnailsBar_theme02());
		);
	</action>
	
	<action name="loadThumbsPartTwo_thumbnailsBar_theme02">
		ifnot(layer[scrollAreaContainer_thumbnailsBar_theme02].ready,
			
			
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				thumbnailBorderImageInit_thumbnailsBar_theme02();
			,
				thumbnailBorderDrawInit_thumbnailsBar_theme02();
			);
			
			
			set(thumbsCounter_thumbnailsBar_theme02, 0);
			
			
				for( set(i_thumbnailsBar_theme02, 0), i_thumbnailsBar_theme02 LT scene.count, inc(i_thumbnailsBar_theme02),
					createThumb_thumbnailsBar_theme02(get(scene[get(i_thumbnailsBar_theme02)].name), get(scene[get(i_thumbnailsBar_theme02)].thumburl), get(i_thumbnailsBar_theme02), get(scene[get(i_thumbnailsBar_theme02)].titleid));
					inc(thumbsCounter_thumbnailsBar_theme02);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].currentThumbsCount, get(thumbsCounter_thumbnailsBar_theme02));
			
			
			setSize_thumbnailsBar_theme02(get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].width), get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].height));
			
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].visible, true);
			
			
				if (tour_displaycontrols,
					showWithControlsBar_thumbnailsBar_theme02();
				,
					hideWithControlsBar_thumbnailsBar_theme02();
				);
			
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].ready, true);
		);
	</action>
	
	
	<action name="setSize_thumbnailsBar_theme02">
		
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].targetWidth, %1);
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].height, %2);
		layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].updatepos();
		
		
		mul(totalMarginX_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX), 2);
		mul(totalMarginY_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginY), 2);
		
			add(totalPluginHeight_thumbnailsBar_theme02, get(totalMarginY_thumbnailsBar_theme02), get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelheight LT totalPluginHeight_thumbnailsBar_theme02,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].height, get(totalPluginHeight_thumbnailsBar_theme02));
			);
		
		layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].updatepos();
		
		
		sub(containerWidth_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelwidth), get(totalMarginX_thumbnailsBar_theme02));
		sub(containerHeight_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelheight), get(totalMarginY_thumbnailsBar_theme02));

		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].width, get(containerWidth_thumbnailsBar_theme02));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].height, get(containerHeight_thumbnailsBar_theme02));
		
		set(scrollAreaSize_thumbnailsBar_theme02, 0);
		
		
		mul(totalThumbsSpacer_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].currentThumbsCount), get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbSpacer));
		sub(totalThumbsSpacer_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, true);
		

			mul(scrollAreaSize_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth), get(layer[scrollAreaContainer_thumbnailsBar_theme02].currentThumbsCount));
			add(scrollAreaSize_thumbnailsBar_theme02, get(totalThumbsSpacer_thumbnailsBar_theme02));
			
			set(layer[thumbsScrollArea_thumbnailsBar_theme02].width, get(scrollAreaSize_thumbnailsBar_theme02));
			set(layer[thumbsScrollArea_thumbnailsBar_theme02].height, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
			
			
			if(layer[scrollAreaContainer_thumbnailsBar_theme02].width LT layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility_thumbnailsBar_theme02();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility_thumbnailsBar_theme02">
		if(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible,
			set(boolValue_thumbnailsBar_theme02, false);
			
			if (tour_displaythumbnails,
				if (tour_displaycontrols,
					set(boolValue_thumbnailsBar_theme02, true);
				);
			);
			
			set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, get(boolValue_thumbnailsBar_theme02));
		);
	</action>
	
	
	<action name="createThumb_thumbnailsBar_theme02">

			add(offsetFactor_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth), get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbSpacer));
	
			mul(thumbIncPos_thumbnailsBar_theme02, %3, get(offsetFactor_thumbnailsBar_theme02));
			
			
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				add(thumbIncPos_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX));
			);
			
		
		mul(negativeOffsetX_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX), -1);
		mul(negativeOffsetY_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		addlayer(get(thumbName));

		

		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea_thumbnailsBar_theme02);
		);

		
		set(layer[get(thumbName)].onloaded, loadedImages_thumbnailsBar_theme02("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY));
		
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea_thumbnailsBar_theme02);
				set(layer[get(thumbName)].x, get(thumbIncPos_thumbnailsBar_theme02));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX));
				set(layer[get(thumbName)].onclick, resetMouseBehavior_thumbnailsBar_theme02(); mainloadscene(%1); delayedcall(0.1,highlightThumb_thumbnailsBar_theme02(%1)));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX_thumbnailsBar_theme02));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY_thumbnailsBar_theme02));
			set(layer[get(thumbBorderName)].onclick, resetMouseBehavior_thumbnailsBar_theme02(); mainloadscene(%1); delayedcall(0.1,highlightThumb_thumbnailsBar_theme02(%1)));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos_thumbnailsBar_theme02)); 
				
		);


		
		setupMouseBehavior_thumbnailsBar_theme02(%1, %4);
		
	</action>
	
	
	
	<action name="removeThumb_thumbnailsBar_theme02">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		removelayer(get(thumbBorderName));


	</action>
	
	
	
	<action name="setupArrows_thumbnailsBar_theme02">
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
			hideArrows_thumbnailsBar_theme02();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer_thumbnailsBar_theme02].width LT layer[thumbsScrollArea_thumbnailsBar_theme02].width,
				
					showArrows_thumbnailsBar_theme02();
				,
					hideArrows_thumbnailsBar_theme02();
				);
			,
				hideArrows_thumbnailsBar_theme02();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb_thumbnailsBar_theme02();
		);
		
		
			
			if(layer[scrollAreaContainer_thumbnailsBar_theme02].width LT layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows_thumbnailsBar_theme02">
		
		
		
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].visible, true);
		set(layer[scrollNextArrow_thumbnailsBar_theme02].visible, true);
		
		
		
			
			add(totalArrowSize_thumbnailsBar_theme02, get(layer[scrollPrevArrow_thumbnailsBar_theme02].width), get(layer[scrollNextArrow_thumbnailsBar_theme02].width));
		
			
			sub(scrollAreaContainerSize_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelwidth), get(totalArrowSize_thumbnailsBar_theme02));
		
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].width, get(scrollAreaContainerSize_thumbnailsBar_theme02));
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].x, get(layer[scrollPrevArrow_thumbnailsBar_theme02].width));
			
		
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].onhover, scrollPrev_thumbnailsBar_theme02(););
		set(layer[scrollNextArrow_thumbnailsBar_theme02].onhover, scrollNext_thumbnailsBar_theme02(););
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].onclick, scrollPrev_thumbnailsBar_theme02(get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow_thumbnailsBar_theme02].onclick, scrollNext_thumbnailsBar_theme02(get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].onout, set(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedInit)););
		set(layer[scrollNextArrow_thumbnailsBar_theme02].onout, set(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedInit)););
		
	</action>
	
	
	
	
	<action name="hideArrows_thumbnailsBar_theme02">
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].visible, false);
		set(layer[scrollNextArrow_thumbnailsBar_theme02].visible, false);
		
		

			mul(totalMargin_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX), 2);
			
			sub(scrollAreaContainerSize_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelwidth), get(totalMargin_thumbnailsBar_theme02));

			set(layer[scrollAreaContainer_thumbnailsBar_theme02].width, get(scrollAreaContainerSize_thumbnailsBar_theme02));
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev_thumbnailsBar_theme02">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_thumbnailsBar_theme02].stopscrolling();
		
		set(scrollLimit_thumbnailsBar_theme02, 0);
		
		
			
			
			add(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed));
			if(layer[thumbsScrollArea_thumbnailsBar_theme02].x GE scrollLimit_thumbnailsBar_theme02,
				set(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(scrollLimit_thumbnailsBar_theme02));
			);
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed LT layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedMax,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext_thumbnailsBar_theme02">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_thumbnailsBar_theme02].stopscrolling();
		
			
			sub(scrollLimit_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].width), get(layer[scrollAreaContainer_thumbnailsBar_theme02].width));
			
			mul(scrollLimit_thumbnailsBar_theme02, -1);
			
			sub(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed));
			if(layer[thumbsScrollArea_thumbnailsBar_theme02].x LE scrollLimit_thumbnailsBar_theme02,
				set(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(scrollLimit_thumbnailsBar_theme02));
			);
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed LT layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedMax,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior_thumbnailsBar_theme02">
	
		
		
			for( set(j_thumbnailsBar_theme02, 0), j_thumbnailsBar_theme02 LT scene.count, inc(j_thumbnailsBar_theme02),
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j_thumbnailsBar_theme02)].name));
				txtadd(thumbBorderName, '_thumbnailsBar_theme02');
				
				setupMouseBehavior_thumbnailsBar_theme02(get(scene[get(j_thumbnailsBar_theme02)].name), get(scene[get(j_thumbnailsBar_theme02)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior_thumbnailsBar_theme02">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showTooltip('plugin'));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showTooltip('plugin'));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb_thumbnailsBar_theme02">
			delayedcall(0.1,highlightThumb_thumbnailsBar_theme02(get(xml.scene)));
	</action>
	
	
	<action name="highlightThumb_thumbnailsBar_theme02">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '_thumbnailsBar_theme02');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb_thumbnailsBar_theme02(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb_thumbnailsBar_theme02">
			scrollToThumb_thumbnailsBar_theme02(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb_thumbnailsBar_theme02">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');

			set(posX_thumbnailsBar_theme02, 0);
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				div(halfThumbWidth_thumbnailsBar_theme02, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
					add(posX_thumbnailsBar_theme02, get(layer[get(thumbName)].x), get(halfThumbWidth_thumbnailsBar_theme02));
				);
				if(layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter,
					layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter(get(posX_thumbnailsBar_theme02), 0);
				);
			,
				div(halfThumbWidth_thumbnailsBar_theme02, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
					add(posX_thumbnailsBar_theme02, get(layer[get(thumbBorderName)].x), get(halfThumbWidth_thumbnailsBar_theme02));
				);
				if(layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter,
					layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter(get(posX_thumbnailsBar_theme02), 0);
				);
			);
		
	</action>
	





  <contextmenu fullscreen="false" versioninfo="false" touch="true">
    <item name="author" onclick="getmessage(urltoopen,project_author_url);openurl(get(urltoopen),_blank);" />
    <item name="normal"        onclick="setViewNormal();
" separator="true"/>
    <item name="fisheye"       onclick="setViewFisheye();
"/>
    <item name="architectural" onclick="setViewArchitectural();
"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();
"/>
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" 
    onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" 
    onxmlcomplete="updateContextMenu" 
    changetourlanguage="updateContextMenu" 
    />
  <events name="contextmenuvrevents" keep="true" 
    onvravailable="updateContextMenu();" onvrunavailable="updateContextMenu();"
    devices="html5"
    />
  <action name="updateContextMenu">
    getmessage(contextmenu.item[author].caption, project_author_name);
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    set(sceneisfull360, false);
    if(scene[get(xml.scene)].full360,
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
    );
    if (sceneisfull360 AND (device.webgl OR device.flash),
      set(contextmenu.item[fisheye].visible, true);
      getmessage(contextmenu.item[fisheye].caption, contextmenufisheyelabel);
      set(contextmenu.item[littleplanet].visible, true);
      getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    ,
      set(contextmenu.item[fisheye].visible, false);
      set(contextmenu.item[littleplanet].visible, false);
    );
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
  </action>


  <progress showwait.flash="loopings(
				0xffffff,
				15,15,
				0,0,
				0xffffff,0,
				0,0,center
				)"
			showreloads.flash="false"
			parent=""
			/>


  <layer name="progressbar_bg"
    align="bottom"
    bgcolor="0xffffff"
    bgalpha="1.0"
    bgborder="0"
    onclick="progressbar_stop();"
    enabled="true"
    handcursor="false"
    bgcapture="true"
    x="0" y="0"
    type="container"
    width="100%" height="5"
    visible="true"
    keep="true">
      <layer name="progressbar_bar" 
        align="topleft"
        bgcolor="0x555555"
        bgalpha="1.0"
        x="0" y="0"
        type="container"
        width="0%"
        height="100%"
        enabled="false"
        keep="true"
        />
  </layer>
  <action name="progressbar_start">
    if(scene[get(xml.scene)].video,
      progressbar_stop();
    ,
      mul(progress_val, get(progress.progress), 100);
      txtadd(progress_percent, get(progress_val),"%");
      set(layer[progressbar_bar].width, get(progress_percent));
    if (device.html5, 
      mul(xcrop, layer[progressbarwheel].frame, 64);
      txtadd(layer[progressbarwheel].crop, get(xcrop), '|0|64|64');
      
      inc(layer[progressbarwheel].frame);
      if(layer[progressbarwheel].frame GE layer[progressbarwheel].frames, set(layer[progressbarwheel].frame,0));
    );
      delayedcall(progressbar_progresscall, 0.1,progressbar_start());
      if(progress_val == 100,
        progressbar_stop();
      );
    );
  </action>
  <action name="progressbar_stop">
    stopdelayedcall(progressbar_progresscall);
    set(layer[progressbar_bg].visible, false);
    set(layer[progressbar_bar].width, "0%");
    if (device.html5, set(layer[progressbarwheel].visible, false););
  </action>
  <events name="progressbar_events" onloadcomplete="progressbar_stop();" onxmlcomplete="if (device.html5,set(layer[progressbarwheel].visible, true););set(layer[progressbar_bg].visible, true);progressbar_start();" keep="true" />

  <!-- loading wheel -->
  <layer name="progressbarwheel"
         keep="true"
         devices="html5"
         visible="false"
         url="%FIRSTXML%/graphics/progressbarandloopings/loadingwheel.png"
         crop="0|0|64|64"
         align="center"
         x="0" y="0"
         frame="0" frames="12"
         width="30"
         height="30" />


  <events name="title_events" 
    onTourStart="showtitle();"
    hidetourcontrols="hidetitle();" 
    showtourcontrols="showtitle();" 
    changetourlanguage="changeLanguagetitle"
    keep="true" />

  <action name="hidetitle">set(layer[title].visible, false);</action>
  <action name="showtitle">set(layer[title].visible, true );</action>

  <action name="changeLanguagetitle">
    getmessage(layer[title].html,get(projecttitleid));
    escape(layer[title].html);
  </action>

  <layer name="title" keep="true" zorder="7"
         type="text"
         align="top" x="10" y="15"
         onloaded="getmessage(html,get(projecttitleid));escape(html);"
         bg="false"
         bgborder="0"
         alpha="1"
         visible="false"
         capture="false" handcursor="false" enabled="false"
         interactivecontent="false" 
         txtshadow="1.0 1.0 4.0 0x000000 1.0"
         css="text-align:center;
              color:#ffffff;
              font-family:Helvetica;
              font-size:28px;"/>


<krpano controlBar_dpadbarbuilt="false" controlBar_dpadhorizontalwidth="0" controlBar_dpadverticalheight="0" controlBar_dpadIsOpened="false" />

<events name="controlBar_dpadevents" 
	onxmlcomplete="controlBar_dpadbuildMenuBar();" 


	keep="true" />



<action name="controlBar_dpadbuildMenuBar">
	ifnot (controlBar_dpadbarbuilt, controlBar_dpadbuildMenu(); set(controlBar_dpadbarbuilt, true););
</action>

<action name="controlBar_dpadbuildMenu">
	
	
	
	set(controlBar_dpadbutton_pos, 10);




		if (device.fullscreensupport,
			set(layer[controlBar_dpadbtn_openfs].y, get(controlBar_dpadbutton_pos));
			set(layer[controlBar_dpadbtn_closefs].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	
		if (device.desktop,
			set(layer[controlBar_dpadbtn_ctrlmode_drag_to].y, get(controlBar_dpadbutton_pos));
			set(layer[controlBar_dpadbtn_ctrlmode_move_to].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	


	
		if (device.desktop,
			set(layer[controlBar_dpadbtn_out].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
				set(layer[controlBar_dpadzoom_slider_bg].y, get(controlBar_dpadbutton_pos));
				inc(controlBar_dpadbutton_pos, 70);
			set(layer[controlBar_dpadbtn_in].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	
		set(layer[controlBar_dpadbtn_autorotate_on ].y, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_autorotate_off].y, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	

	

	
	if (controlBar_dpadbutton_pos != 10,
		set(layer[controlBar_dpadmenu_vertical_bg].height, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadmenu_vertical_bg_border].height, get(controlBar_dpadbutton_pos));
		set(controlBar_dpadverticalheight, get(controlBar_dpadbutton_pos));


	,
		set(layer[controlBar_dpadmenu_vertical_bg].height, 0);
		set(layer[controlBar_dpadmenu_vertical_bg_border].height, 0);


	);
	
	
	
	set(controlBar_dpadbutton_pos, 10);
	
	
		if (scene.count GT 1,
			set(layer[controlBar_dpadbtn_prev_pano].x, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
			
			set(layer[controlBar_dpadbtn_next_pano].x, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	


	
	
	

	
	
	

	
		if (device.desktop,
			set(layer[controlBar_dpadbtn_display_help].x, get(controlBar_dpadbutton_pos));
			set(layer[controlBar_dpadbtn_close_help].x, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	
	if (controlBar_dpadbutton_pos != 10,
		set(layer[controlBar_dpadmenu_horizontal_bg].width, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadmenu_horizontal_bg_border].width, get(controlBar_dpadbutton_pos));
		set(controlBar_dpadhorizontalwidth, get(controlBar_dpadbutton_pos));
	,
		set(layer[controlBar_dpadmenu_horizontal_bg].width, 0);
	);
	
	
	
	
</action>


<events name="controlBar_dpadStartTourEvents" onTourStart="controlBar_dpadCallOnStartTour();" keep="true" />

<action name="controlBar_dpadCallOnStartTour">
	
	showTourControls();

</action>




<style name="controlBar_dpadbtn_vertical_style"
	keep="true"
	align="bottom"
	onhover="controlBar_dpadshowVerticalMenuTooltip();"
	onout="hideTooltip();"
	crop="0|0|30|30"
	onovercrop="0|30|30|30"
	ondowncrop="0|60|30|30"
	x="0"
	/>
<style name="controlBar_dpadbtn_vertical_style_off"
	keep="true"
	align="bottom"
	onhover="controlBar_dpadshowVerticalMenuTooltip();"
	onout="hideTooltip();"
	x="0"
	/>
<style name="controlBar_dpadbtn_vertical_style_alpha"
	alpha="1.0"
	devices="tablet.or.mobile"
	/>
<style name="controlBar_dpadbtn_vertical_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

<style name="controlBar_dpadmenu_bg_alpha"
	alpha="0.2"
	devices="desktop"
	/>
<style name="controlBar_dpadmenu_bg_alpha"
	alpha="0.5"
	devices="tablet.or.mobile"
	/>

<layer name="controlBar_dpadmenu_vertical_bg"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_vertical.png"
	keep="true"
	align="bottomright"
	x="64"
	y="118"
	edge="bottom"
	zorder="8"
	scale9grid="12|10|3|40"
	style="controlBar_dpadmenu_bg_alpha"
	visible="false"
	/>

<layer name="controlBar_dpadmenu_vertical_bg_border"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_vertical.png"
	keep="true"
	align="bottomright"
	x="64"
	y="118"
	edge="bottom"
	zorder="9"
	scale9grid="12|10|3|40"
	onout="controlBar_dpadvertical_onout_action();"
	onover="controlBar_dpadvertical_onover_action();"
	visible="false"
	>

  <layer name="controlBar_dpadbtn_autorotate_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_start_autorotation.png"
          onclick="resumeautorotation();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautorotateOnTip"
          />
  <layer name="controlBar_dpadbtn_autorotate_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_stop_autorotation.png"
          onclick="pauseautorotation();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautorotateOffTip"
          />



  <layer name="controlBar_dpadbtn_in"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_zoom_in.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          ondown="viewControlZoomIn(false);"
          onup="viewControlZoomStop();
"
          tooltip="controlBar_dpadzoomInTip"
          visible="false"
          devices="desktop"
          />

  <layer name="controlBar_dpadbtn_out"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_zoom_out.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          ondown="viewControlZoomOut(false);
"
          onup="viewControlZoomStop();
"
          tooltip="controlBar_dpadzoomOutTip"
          visible="false"
          devices="desktop"
          />
  <layer name="controlBar_dpadzoom_slider_bg"
          url="%FIRSTXML%/graphics/crosscornerbar/slider_bg_vertical.png"
          keep="true"
          align="bottom"
          alpha="0.2"
          visible="false"
          devices="desktop"
          >
    <layer name="controlBar_dpadzoom_slider_grip"
           keep="true"
           url="%FIRSTXML%/graphics/crosscornerbar/slider_grip_vertical.png"
           align="top"
           edge="center"
           ondown="controlBar_dpadzoom_slider_grip_ondown();"
           />
  </layer>

  <layer name="controlBar_dpadbtn_openfs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_enter_fs.png"
          onclick="enterFullscreen();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadopenFsTip"
          visible="false"
          devices="fullscreensupport"
          />
  <layer name="controlBar_dpadbtn_closefs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_close_fs.png"
          onclick="exitFullscreen();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadcloseFsTip"
          devices="fullscreensupport"
          />




  <layer name="controlBar_dpadbtn_ctrlmode_move_to"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_move_to.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadctrlmodeMoveTip"
          onclick="setControlModeMoveTo();
"
          visible="false"
          devices="desktop"
          />
  <layer name="controlBar_dpadbtn_ctrlmode_drag_to"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_drag_to.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadctrlmodeDragTip"
          onclick="setControlModeDragTo();
"
          visible="false"
          devices="desktop"
          />


</layer>

  <action name="controlBar_dpadvertical_onout_action">
    set(layer[controlBar_dpadmenu_vertical_bg].alpha, 0.2);
    if (device.fullscreensupport,
      set(layer[controlBar_dpadbtn_openfs].alpha, 0.2);
      set(layer[controlBar_dpadbtn_closefs].alpha, 0.2);
    );
    if (device.desktop,
    set(layer[controlBar_dpadbtn_in].alpha, 0.2);
    set(layer[controlBar_dpadbtn_out].alpha, 0.2);
    set(layer[controlBar_dpadzoom_slider_bg].alpha, 0.2);
    );


    set(layer[controlBar_dpadbtn_autorotate_off].alpha, 0.2);
    set(layer[controlBar_dpadbtn_autorotate_on ].alpha, 0.2);
    if (device.desktop,
      set(layer[controlBar_dpadbtn_ctrlmode_drag_to].alpha, 0.2);
      set(layer[controlBar_dpadbtn_ctrlmode_move_to].alpha, 0.2);
    );
  </action>

  <action name="controlBar_dpadvertical_onover_action">
    set(layer[controlBar_dpadmenu_vertical_bg].alpha, 1);
    if (device.fullscreensupport,
      set(layer[controlBar_dpadbtn_openfs].alpha, 1);
      set(layer[controlBar_dpadbtn_closefs].alpha, 1);
    );
    if (device.desktop,
    set(layer[controlBar_dpadbtn_in].alpha, 1);
    set(layer[controlBar_dpadbtn_out].alpha, 1);
    set(layer[controlBar_dpadzoom_slider_bg].alpha, 1);
    );


    set(layer[controlBar_dpadbtn_autorotate_off].alpha, 1);
    set(layer[controlBar_dpadbtn_autorotate_on ].alpha, 1);
    if (device.desktop,
      set(layer[controlBar_dpadbtn_ctrlmode_drag_to].alpha, 1);
      set(layer[controlBar_dpadbtn_ctrlmode_move_to].alpha, 1);
    );
  </action>

  <action name="controlBar_dpadhorizontal_onout_action">
    set(layer[controlBar_dpadmenu_horizontal_bg].alpha, 0.2);


    if (scene.count GT 1,
    set(layer[controlBar_dpadbtn_prev_pano].alpha, 0.2);
    set(layer[controlBar_dpadbtn_next_pano].alpha, 0.2);
    );




    if (device.desktop,
      set(layer[controlBar_dpadbtn_display_help].alpha, 0.2);
      set(layer[controlBar_dpadbtn_close_help].alpha, 0.2);
    ); 
  </action>

  <action name="controlBar_dpadhorizontal_onover_action">
    set(layer[controlBar_dpadmenu_horizontal_bg].alpha, 1);


    if (scene.count GT 1,
    set(layer[controlBar_dpadbtn_prev_pano].alpha, 1);
    set(layer[controlBar_dpadbtn_next_pano].alpha, 1);
    );




    if (device.desktop,
      set(layer[controlBar_dpadbtn_display_help].alpha, 1);
      set(layer[controlBar_dpadbtn_close_help].alpha, 1);
    );
  </action>

  <style name="controlBar_dpadbtn_horizontal_style"
         keep="true"
         align="left"
         onhover="controlBar_dpadshowHorizontalMenuTooltip();"
         onout="hideTooltip();"
               crop="0| 0|30|30"
         onovercrop="0|30|30|30"
         ondowncrop="0|60|30|30"
         y="0"
         />
<style name="controlBar_dpadbtn_horizontal_style_alpha"
	alpha="1.0"
	devices="tablet.or.mobile"
	/>
<style name="controlBar_dpadbtn_horizontal_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

  <layer name="controlBar_dpadmenu_horizontal_bg"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_horizontal.png"
          keep="true"
          align="bottomright"
          x="118"
          y="64"
          edge="right"
          zorder="8"
          scale9grid="10|12|40|3"
          style="controlBar_dpadmenu_bg_alpha"
          visible="false"
          />

  <layer name="controlBar_dpadmenu_horizontal_bg_border"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_horizontal.png"
          keep="true"
          align="bottomright"
          x="118"
          y="64"
          edge="right"
          zorder="9"
          scale9grid="10|12|40|3"
          onout="controlBar_dpadhorizontal_onout_action();"
          onover="controlBar_dpadhorizontal_onover_action();"
          visible="false"
          >
    <layer name="controlBar_dpadbtn_prev_pano"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_previous_scene.png"
            onclick="loadPreviousScene();
"
            style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadprevSceneTip"
            visible="false"
            />
    <layer name="controlBar_dpadbtn_next_pano"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_next_scene.png"
            onclick="loadNextScene();
"
            style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadnextSceneTip"
            visible="false"
            />




    <layer name="controlBar_dpadbtn_display_help"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_help.png"
            onclick="controlBar_dpaddisplayHelp();"
            style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
            tooltip="controlBar_dpaddisplayHelpTip"
            devices="desktop"
            visible="false"
            />
    <layer name="controlBar_dpadbtn_close_help"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_help.png"
            onclick="controlBar_dpadcloseHelp();"
            style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadhideHelpTip"
            devices="desktop"
            visible="false"
            />



  </layer>


	
	<style name="controlBar_dpadbtn_navigation_style"
		keep="true"
		onhover="controlBar_dpadshowVerticalMenuTooltip();"
		onout="hideTooltip();"
		crop="0|0|30|30"
		onovercrop="0|30|30|30"
		ondowncrop="0|60|30|30"
	/>
	<style name="controlBar_dpadbtn_navigation_style_alpha"
		alpha="1.0"
		devices="tablet.or.mobile"
	/>
	<style name="controlBar_dpadbtn_navigation_style_alpha"
		alpha="0.2"
		devices="desktop"
	/>
	<style name="controlBar_dpadbtn_navigation_style_showctrl"
		keep="true"
		onout="hideTooltip();set(alpha, 0.5);"
		onover="set(alpha, 1);"
	/>
	
	<layer name="controlBar_dpadnavigation_bg"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_move.png"
		align="bottomright"
		x="10"
		y="10"
		keep="true"
		capture="false"
		zorder="8"
		style="controlBar_dpadmenu_bg_alpha"
		visible="false"
		/>

  <layer name="controlBar_dpadnavigation_bg_border"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_move.png"
          keep="true"
          align="bottomright"
          x="10"
          y="10"
          capture="false"
          zorder="9"
          onout="controlBar_dpadnav_onout_action();"
          onover="controlBar_dpadnav_onover_action();"
          visible="false"
          >
    <layer name="controlBar_dpadbtn_left"
            ondown="viewControlMoveLeft(false);
"
            onup="viewControlMoveHoriStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_left.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveLeftTip"
            x="5"
            y="0"
            edge="left"
            align="left"
            visible="false"
             />
    <layer name="controlBar_dpadbtn_right"
            ondown="viewControlMoveRight(false);
"
            onup="viewControlMoveHoriStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_right.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveRightTip"
            x="5"
            y="0"
            edge="right"
            align="right"
            visible="false"
             />
    <layer name="controlBar_dpadbtn_up"
            ondown="viewControlMoveUp(false);
"
            onup="viewControlMoveVertStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_up.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveUpTip"
            x="0"
            y="5"
            align="top"
            edge="top"
            visible="false"
             />
    <layer name="controlBar_dpadbtn_down"
            ondown="viewControlMoveDown(false);
"
            onup="viewControlMoveVertStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_down.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveDownTip"
            x="0"
            y="5"
            edge="bottom"
            align="bottom"
            visible="false"
             />

	<layer name="controlBar_dpadbtn_hidecontrols"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_hide_controls.png"
		style="controlBar_dpadbtn_navigation_style"
		onclick="hideTourControls();
"
		edge="center"
		align="center"
		tooltip="controlBar_dpadhideControlsTip"
		visible="false"
		alpha="1.0"
		/>
	<layer name="controlBar_dpadbtn_showcontrols"
		onclick="showTourControls();
"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_show_controls.png"
		style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_showctrl"
		align="center"
		edge="center"
		visible="false"
		alpha="0.5"
		tooltip="controlBar_dpaddisplayControlsTip"
		/>
	
</layer>


  <action name="controlBar_dpadnav_onout_action">
    set(layer[controlBar_dpadnavigation_bg].alpha, 0.2);
    set(layer[controlBar_dpadbtn_left].alpha, 0.2);
    set(layer[controlBar_dpadbtn_right].alpha, 0.2);
    set(layer[controlBar_dpadbtn_up].alpha, 0.2);
    set(layer[controlBar_dpadbtn_down].alpha, 0.2);
  </action>

  <action name="controlBar_dpadnav_onover_action">
    set(layer[controlBar_dpadnavigation_bg].alpha, 1);
    set(layer[controlBar_dpadbtn_left].alpha, 1);
    set(layer[controlBar_dpadbtn_right].alpha, 1);
    set(layer[controlBar_dpadbtn_up].alpha, 1);
    set(layer[controlBar_dpadbtn_down].alpha, 1);
  </action>



	<events name="controlBar_dpadAutorotationEvents"
		onstartautorotation="controlBar_dpadupdateAutorotationButtons();"
		onresumeautorotation="controlBar_dpadupdateAutorotationButtons();"
		onstopautorotation="controlBar_dpadupdateAutorotationButtons();"
		onpauseautorotation="controlBar_dpadupdateAutorotationButtons();"
		keep="true"/>
	<action name="controlBar_dpadHideAutorotationButtons">
		set(layer[controlBar_dpadbtn_autorotate_off].visible, false);
		set(layer[controlBar_dpadbtn_autorotate_on].visible , false);
	</action>
	<action name="controlBar_dpadShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[controlBar_dpadbtn_autorotate_off].visible, false);
			set(layer[controlBar_dpadbtn_autorotate_on].visible , true);
		,
			set(layer[controlBar_dpadbtn_autorotate_off].visible, true);
			set(layer[controlBar_dpadbtn_autorotate_on].visible , false);
		);
	</action>
	<action name="controlBar_dpadupdateAutorotationButtons">
		if (tour_displaycontrols,
			controlBar_dpadShowAutorotationButtons();
		,
			controlBar_dpadHideAutorotationButtons();
		);
	</action>



	<events name="controlBar_dpadcontrolmodechangedevent" oncontrolmodechanged="if (controlBar_dpadControlModeButtonsActivated,controlBar_dpadupdateControlModeButtons(););" onxmlcomplete="set(controlBar_dpadControlModeButtonsActivated, true);" keep="true"/>
	<action name="controlBar_dpadHideControlModeButtons">
		set(layer[controlBar_dpadbtn_ctrlmode_move_to].visible, false);
		set(layer[controlBar_dpadbtn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="controlBar_dpadShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[controlBar_dpadbtn_ctrlmode_drag_to].visible, true);
			set(layer[controlBar_dpadbtn_ctrlmode_move_to].visible, false);
		,
			set(layer[controlBar_dpadbtn_ctrlmode_move_to].visible, true);
			set(layer[controlBar_dpadbtn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="controlBar_dpadupdateControlModeButtons">
	if (device.desktop,
		if (tour_displaycontrols,
			controlBar_dpadShowControlModeButtons();
		,
			controlBar_dpadHideControlModeButtons();
		);
	,
		controlBar_dpadHideControlModeButtons();
	);
	</action>
	
  <action name="controlBar_dpadzoom_slider_grip_dragging">
    if (pressed,
      sub(dy, mouse.stagey, drag_stagey); 
      add(newy, drag_currenty, dy); 

      if(newy LT 0, set(newy, 0) );
      if(newy GT layer[controlBar_dpadzoom_slider_bg].pixelheight, copy(newy, layer[controlBar_dpadzoom_slider_bg].pixelheight));
      copy(y, newy);

      div(val, newy, layer[controlBar_dpadzoom_slider_bg].pixelheight);

      sub(fovrange, view.fovmax, view.fovmin);
      mul(newfov  , val, fovrange);
      add(newfov  , view.fovmin);
      set(view.fov, get(newfov));

      delayedcall(0, controlBar_dpadzoom_slider_grip_dragging());
    );
  </action>
  <action name="controlBar_dpadzoom_slider_grip_ondown">
    copy(drag_currenty, y);
    copy(drag_stagey, mouse.stagey);
    controlBar_dpadzoom_slider_grip_dragging();
  </action>
  <events name="controlBar_dpadzoom_slider_events" keep="true" onviewchanged="controlBar_dpadzoom_slider_update();" />
  <action name="controlBar_dpadzoom_slider_update">
    if (device.desktop,
    ifnot (layer[controlBar_dpadzoom_slider_grip].pressed,
      sub(val, view.fov, view.fovmin);
      sub(fovrange, view.fovmax, view.fovmin);
      div(val, fovrange);
      mul(newy, val, layer[controlBar_dpadzoom_slider_bg].pixelheight);
      set(layer[controlBar_dpadzoom_slider_grip].y, get(newy));
    );
    );
  </action>

	<events name="controlBar_dpadmenufullscreenchangeevent"
		onenterfullscreen="controlBar_dpadupdateFullscreenButtons();"
		onexitfullscreen="controlBar_dpadupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_dpadHideFullscreenButtons">
		set(layer[controlBar_dpadbtn_openfs].visible , false);
		set(layer[controlBar_dpadbtn_closefs].visible, false);
	</action>
	<action name="controlBar_dpadShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_dpadbtn_openfs].visible , false);
				set(layer[controlBar_dpadbtn_closefs].visible, true);
			,
				set(layer[controlBar_dpadbtn_openfs].visible ,true);
				set(layer[controlBar_dpadbtn_closefs].visible,false);
			);
		,
			controlBar_dpadHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_dpadupdateFullscreenButtons">
		if (tour_displaycontrols,
			controlBar_dpadShowFullscreenButtons();
		,
			controlBar_dpadHideFullscreenButtons();
		);
	</action>
	



	<events name="controlBar_dpadmenuhideshowcontrolsevent"
		hidetourcontrols="controlBar_dpadhideMenuControls();"
		showtourcontrols="controlBar_dpadshowMenuControls();"
		keep="true"/>
	

<action name="controlBar_dpadhideMenuControls">
		set(controlBar_dpadIsOpened, false);
		set(layer[controlBar_dpadnavigation_bg].visible, false);
		
			set(layer[controlBar_dpadbtn_up].visible, false);
			set(layer[controlBar_dpadbtn_down].visible, false);
			set(layer[controlBar_dpadbtn_left].visible, false);
			set(layer[controlBar_dpadbtn_right].visible, false);
		
		set(layer[controlBar_dpadnavigation_bg_border].visible, true);
		tween(layer[controlBar_dpadnavigation_bg_border].alpha, 0.5, 1);
		
		
		if(controlBar_dpadverticalheight GT 0,
			set(layer[controlBar_dpadmenu_vertical_bg].visible, false);
				set(layer[controlBar_dpadbtn_in].visible, false);
				set(layer[controlBar_dpadbtn_out].visible, false);
					set(layer[controlBar_dpadzoom_slider_bg].visible, false);


				controlBar_dpadupdateAutorotationButtons();


				controlBar_dpadupdateFullscreenButtons();
				controlBar_dpadupdateControlModeButtons();
			tween(layer[controlBar_dpadmenu_vertical_bg_border].alpha , 0, 1);
			tween(layer[controlBar_dpadmenu_vertical_bg_border].height , 0, 1, easeOutQuad, set(layer[controlBar_dpadmenu_vertical_bg_border].visible, false));
		);
		
		
		if(controlBar_dpadhorizontalwidth != 0,
			set(layer[controlBar_dpadmenu_horizontal_bg].visible, false);


				if (scene.count GT 1,
					set(layer[controlBar_dpadbtn_prev_pano].visible, false);
					set(layer[controlBar_dpadbtn_next_pano].visible, false);
				);


				controlBar_dpadupdateHelpButtons();


			tween(layer[controlBar_dpadmenu_horizontal_bg_border].alpha , 0, 1);
			tween(layer[controlBar_dpadmenu_horizontal_bg_border].width, 0, 1, easeOutQuad, set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, false));
		);
		set(layer[controlBar_dpadbtn_showcontrols].visible, true);
		set(layer[controlBar_dpadbtn_hidecontrols].visible, false);
	</action>
	
	<action name="controlBar_dpadshowMenuControls">
	set(controlBar_dpadIsOpened, true);
    set(layer[controlBar_dpadbtn_showcontrols].visible, false);
    set(layer[controlBar_dpadbtn_hidecontrols].visible, true);
    set(layer[controlBar_dpadnavigation_bg].visible, true);

    set(layer[controlBar_dpadbtn_up].visible, true);
    set(layer[controlBar_dpadbtn_down].visible, true);
    set(layer[controlBar_dpadbtn_left].visible, true);
    set(layer[controlBar_dpadbtn_right].visible, true);

    set(layer[controlBar_dpadnavigation_bg_border].visible, true);
    tween(layer[controlBar_dpadnavigation_bg_border].alpha, 1, 1);

    
    if(controlBar_dpadverticalheight GT 0,
      set(layer[controlBar_dpadmenu_vertical_bg_border].visible, true);
      tween(layer[controlBar_dpadmenu_vertical_bg_border].alpha, 1, 1);
      tween(layer[controlBar_dpadmenu_vertical_bg_border].height, get(controlBar_dpadverticalheight), 1, easeOutQuad,
        set(layer[controlBar_dpadmenu_vertical_bg].visible, true);
        controlBar_dpadupdateFullscreenButtons();
        controlBar_dpadupdateAutorotationButtons();


        if (device.desktop,
        set(layer[controlBar_dpadbtn_in].visible, true);
        set(layer[controlBar_dpadbtn_out].visible, true);
        set(layer[controlBar_dpadzoom_slider_bg].visible, true);
        );


      );
    );

    
    if(controlBar_dpadhorizontalwidth != 0,
      set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, true);
      tween(layer[controlBar_dpadmenu_horizontal_bg_border].alpha, 1, 1);
      tween(layer[controlBar_dpadmenu_horizontal_bg_border].width, get(controlBar_dpadhorizontalwidth), 1, easeOutQuad,
        set(layer[controlBar_dpadmenu_horizontal_bg].visible, true);


        if (scene.count GT 1,
          set(layer[controlBar_dpadbtn_prev_pano].visible, true);
          set(layer[controlBar_dpadbtn_next_pano].visible, true);
        );
        controlBar_dpadupdateControlModeButtons();




        controlBar_dpadupdateHelpButtons();


      );
    );
  </action>

  <layer name="controlBar_dpadhelpScreen"
         url="%FIRSTXML%/graphics/crosscornerbar/help_screen_bg.png"
         keep="true"
         align="bottomright"
	     x="110"
	     y="110"
         zorder="97"
         onclick="controlBar_dpadcloseHelp();"
         visible="false"
         width="prop"
         height="10%"
         alpha="0.0"
         onout="set(alpha, 0.2);"
         onover="stoptween(alpha);set(alpha, 1.0);"
         />
  <layer name="controlBar_dpadhelpScreenFg"
         url="%FIRSTXML%/graphics/crosscornerbar/help_screen_fg.png"
         width="prop"
         height="10%"
         x="110"
	     y="110"
         keep="true"
         enabled="false"
         capture="false"
         align="bottomright"
         zorder="98"
         onclick="controlBar_dpadcloseHelp();"
         visible="false"
         alpha="0.0"
         displayed="false"
         saveheight="0"
         />

  <action name="controlBar_dpaddisplayHelp">
    if (device.desktop,
    set(layer[controlBar_dpadhelpScreenFg].displayed, true);
    set(layer[controlBar_dpadhelpScreenFg].visible, true);
    set(layer[controlBar_dpadhelpScreen].visible, true);
    tween(layer[controlBar_dpadhelpScreen].height, 50%, 1);
    tween(layer[controlBar_dpadhelpScreenFg].height, 50%, 1);
    tween(layer[controlBar_dpadhelpScreen].alpha, 0.2, 1);
    tween(layer[controlBar_dpadhelpScreenFg].alpha, 1.0, 1);
    controlBar_dpadupdateHelpButtons();
    );
  </action>
  <action name="controlBar_dpadcloseHelp">
    if (device.desktop,
    set(layer[controlBar_dpadhelpScreenFg].displayed, false);
    tween(layer[controlBar_dpadhelpScreen].alpha, 0.0, 1);
    tween(layer[controlBar_dpadhelpScreenFg].alpha, 0.0, 1);
    tween(layer[controlBar_dpadhelpScreen].height, 10%, 1, easeOutQuad,
      set(layer[controlBar_dpadhelpScreen].visible, false);
    );
    tween(layer[controlBar_dpadhelpScreenFg].height, 10%, 1, easeOutQuad,
      set(layer[controlBar_dpadhelpScreenFg].visible, false);
    );
    controlBar_dpadupdateHelpButtons();
    );
  </action>
	<action name="controlBar_dpadHideHelpButtons">
		set(layer[controlBar_dpadbtn_display_help].visible, false);
		set(layer[controlBar_dpadbtn_close_help].visible, false);
	</action>
	<action name="controlBar_dpadShowHelpButtons">
		if (layer[controlBar_dpadhelpScreenFg].displayed,
			set(layer[controlBar_dpadbtn_close_help].visible, true);
			set(layer[controlBar_dpadbtn_display_help].visible, false);
		,
			set(layer[controlBar_dpadbtn_display_help].visible, true);
			set(layer[controlBar_dpadbtn_close_help].visible, false);
		);
	</action>
	<action name="controlBar_dpadupdateHelpButtons">
	if (device.desktop,
		if (tour_displaycontrols,
			controlBar_dpadShowHelpButtons();
		,
			controlBar_dpadHideHelpButtons();
		);
	,
		controlBar_dpadHideHelpButtons();
	);
	</action>
  


  <action name="controlBar_dpadshowHorizontalMenuTooltip">
    if (tooltip !== null, showTooltip('plugin', controlBar_dpadhorizMenuTooltipStyle, bottom););
  </action>
  <action name="controlBar_dpadshowVerticalMenuTooltip">
    if (tooltip !== null, showTooltip('plugin', controlBar_dpadverticalMenuTooltipStyle, right););
  </action>

  <layer name="controlBar_dpadhorizMenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="true"
	bgcolor="0x2c87a3"
	bgalpha="1"
	bgborder="0"
	css="color:#ffffff;font-family:Times New Roman;font-weight:bold;font-size:14px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	padding="2"
	xoffset="0"
	visible="false"
	html=""
	edge="bottom"
	yoffset="-10"
  />
  <layer name="controlBar_dpadverticalMenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="true"
	bgcolor="0x2c87a3"
	bgalpha="1"
	bgborder="0"
	css="color:#ffffff;font-family:Times New Roman;font-weight:bold;font-size:14px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	padding="2"
	yoffset="0"
	visible="false"
	html=""
	edge="right"
	xoffset="-10"
  />









  <hotspot ath="0" atv="90"
         zorder="0"
         zoom="true"
         name="logo"
         keep="true"
         visible="false"
         capture="false"

			tooltip="logotooltipText"
			onhover="showTooltip('hotspot',logoTooltipStyle);"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo/logo.png" 
         onclick="
getmessage(urltoopen,logowebsiteurl);openurl(get(urltoopen),_blank);
"


         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(hotspot[logo].visible, false);
  </action>
  <action name="showlogo">
      set(hotspot[logo].visible, true);
  </action>



  <events name="logoshowevents" onremovepano="hidelogo" onPanoStart="showlogo" keep="true"/>

<layer name="logoTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="true"
	bgcolor="0x2c87a3"
	bgalpha="0.80000000000000004"
	bgborder="0"
	css="color:#ffffff;font-family:Helvetica;font-size:14px;text-align:left;"
	edge="bottom"
	interactivecontent="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
/>


<action name="setViewArchitectural">
	if(normalViewActivated,stopSetViewTweens(););
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	set(view.fovmax, get(panoview.fovmax));
	set(view.fisheyefovlink, 0.5);
	tween(view.architectural, 1.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fisheye, 0.0, distance(1.0, 0.45), easeOutQuad, 
		set(view.stereographic,false);
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

<action name="setViewLittlePlanet">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewLittlePlanetComplete();
	);
</action>

<action name="setViewLittlePlanetComplete">
	set(backtonormalfirst,false);
	if(view.pannini GE 1.0, set(backtonormalfirst,true));
	if(view.stereographic == false, set(backtonormalfirst,true));
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	set(view.stereographic, true);
	set(view.fisheyefovlink, 1.5);
	tween(view.architectural, 0.0, 0.25);
	tween(view.vlookat, 90, distance(179, 1.50));
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.fov, 150, distance(179, 0.75));
</action>

  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


<action name="setViewNormal">
	stopSetViewTweens();
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	set(view.fisheyefovlink, 0.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
	tween(view.fisheye, 0.0, distance(1.0, 0.45),
		set(view.stereographic,false);
	);
</action>

<krpano normalViewActivated="true" />
<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
	stoptween(view.pannini);
</action>

<action name="setViewFisheye">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewFisheyeComplete();
	);
</action>

<action name="setViewFisheyeComplete">
	set(view.fisheyefovlink, 1.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.30));
	tween(view.fisheye, 0.0, distance(1.0, 0.30), easeOutQuad,
		set(view.stereographic,false);
		tween(view.fisheye, 0.45, distance(1.0, 0.75));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

  <plugin name="soundinterface"
          preload="true"
          url.flash="%SWFPATH%/graphics/soundinterface.swf"
          url.html5="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          bgsoundtoforce = "false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            set(plugin[soundinterface].bgsoundtoforce, false);
            if(scene[get(xml.scene)].video == false OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
           ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    pauseVideoSceneSound();
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            ,

              if(device.mobile OR device.tablet OR device.safari OR device.chrome,
                resumesound(bgsoundname);
                set(plugin[soundinterface].bgsoundpaused, false);
              );
            );
          ,
            if(((plugin[soundinterface].bgsoundpaused == true OR plugin[soundinterface].bgsoundtoforce == true) AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              set(plugin[soundinterface].bgsound, true);
              set(plugin[soundinterface].bgsoundpaused, false);
              set(plugin[soundinterface].bgsoundloopended, false);
              set(plugin[soundinterface].bgsoundtoforce, false);
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
          );
        );
      );
      resumeVideoSceneSound();
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        resumeVideoSceneSound();
      );
    );
  </action>
  <action name="resumeVideoSceneSound">
    if(scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == false,
      videointerface_start_sound();
    );
  </action>
  <action name="pauseVideoSceneSound">
    if(scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == false,
      videointerface_stop_sound();
    );
  </action>
  <action name="preloadSounds">
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          ,

            if(device.mobile OR device.tablet OR device.safari OR device.chrome,
              set(tour_current_played_sound_paused, false);
              resumesound(get(tour_current_played_sound));
            );
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

</krpano>